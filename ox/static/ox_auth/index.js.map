{"version":3,"file":"index.js","sources":["../../../assets/@ox/auth/src/components/OxGroupEdit.vue","../../../assets/@ox/auth/src/components/OxGroupUsers.vue","../../../assets/@ox/auth/src/components/OxGroupPanel.vue","../../../assets/@ox/auth/src/components/OxAgentSelect.vue","../../../assets/@ox/auth/src/components/OxOwnedPanel.vue","../../../assets/@ox/auth/src/app.ts","../../../assets/@ox/auth/src/index.ts"],"sourcesContent":["<template>\n    <ox-model-edit v-bind=\"props\" :repo=\"repos.groups\">\n        <template #default=\"{editor, editable}\">\n            <v-expansion-panels mandatory multiple :model-value=\"['info']\">\n                <v-expansion-panel :title=\"t('views.edit.informations')\" value=\"info\">\n                    <template #text>\n                        <v-text-field variant=\"underlined\" label=\"Group name\"\n                            v-model=\"editor.value.name\"\n                            :rules=\"[rules.errors(editor.errors?.name)]\" />\n                    </template>\n                </v-expansion-panel>\n                <v-expansion-panel :title=\"t('models.permissions', 2)\" value='permissions' v-if=\"editable && editor.value.id && user.can('auth.view_permission')\">\n                    <template #text>\n                        <v-expansion-panel-text>\n                            <ox-permissions-edit :group=\"editor.value\"\n                                v-model=\"editor.value.permissions_id\"/>\n                        </v-expansion-panel-text>\n                    </template>\n                </v-expansion-panel>\n            </v-expansion-panels>\n        </template>\n    </ox-model-edit>\n</template>\n<script setup lang=\"ts\">\nimport {inject} from 'vue'\n\nimport {t, rules} from 'ox'\nimport type {IModelEditorProps} from 'ox'\nimport {OxModelEdit} from 'ox/components'\n\nimport {useAuthModels} from '../composables'\nimport OxPermissionsEdit from './OxPermissionsEdit.vue'\n\nconst repos = useAuthModels()\nconst user = inject('user')\nconst props = defineProps<IModelEditorProps>()\n</script>\n","<template>\n    <v-table>\n        <thead>\n            <tr>\n                <th>{{ t('fields.username') }}</th>\n                <th>{{ t('fields.first_name') }}</th>\n                <th>{{ t('fields.last_name') }}</th>\n                <th>{{ t('fields.actions') }}</th>\n            </tr>\n        </thead>\n        <tbody>\n            <template v-for=\"user in users\">\n                <tr>\n                    <td>{{ user.username }}</td>\n                    <td>{{ user.first_name }}</td>\n                    <td>{{ user.last_name }}</td>\n                    <td>\n                        <ox-action button name=\"edit\" :value=\"user\"/>\n                    </td>\n                </tr>\n            </template>\n        </tbody>\n\n    </v-table>\n</template>\n<script setup>\nimport {computed, inject, defineProps} from 'vue'\n\nimport {t, query} from 'ox'\nimport {OxAction} from 'ox/components'\n\nconst repos = inject('repos')\nconst props = defineProps({\n    group: Object,\n})\n\nconst users = computed(() => repos.users.where('groups_id', (k) => k?.includes(props.group?.id)).get())\n\n</script>\n","<template>\n    <ox-model-panel v-bind=\"props\" :repo=\"repos.groups\" icon=\"mdi-account-multiple\">\n        <template v-for=\"(_, name) in slots\" :key=\"name\" #[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\"></slot>\n        </template>\n\n        <template #views.detail.edit.default=\"{value, saved}\">\n            <ox-group-edit :initial=\"value\" :saved=\"saved\"/>\n        </template>\n\n        <!--\n        <template #views.detail.edit.tab.users=\"{value}\">\n            <v-tab v-if=\"value?.id\" text=\"Members\" value=\"users\"/>\n        </template>\n        <template #views.detail.edit.window.users=\"{value}\">\n            <ox-group-users :group=\"value\"/>\n        </template> -->\n    </ox-model-panel>\n</template>\n<script setup lang=\"ts\">\nimport { defineProps, useSlots, withDefaults } from 'vue'\n\nimport type {IModelPanelProps} from 'ox'\n\nimport { OxModelPanel } from 'ox/components'\nimport { useAuthModels } from '../composables'\nimport OxGroupEdit from './OxGroupEdit.vue'\n\nconst slots = useSlots()\n\nconst repos = useAuthModels()\nconst props = withDefaults(defineProps<IModelPanelProps>(), {\n    name: 'groups',\n    headers: ['id', 'name'],\n})\n</script>\n","<template>\n    <template v-if=\"props.menu\">\n        <v-menu>\n            <template #activator=\"{props: $props}\">\n                <v-btn v-bind=\"$props\" :prepend-icon=\"props.icon\" :text=\"item?.name\"  />\n            </template>\n            <v-list :items=\"items\" item-title=\"name\" item-value=\"id\"\n                selectable v-model:selected=\"value\"\n                />\n        </v-menu>\n    </template>\n    <template v-else>\n        <v-select :items=\"items\" item-title=\"name\" item-value=\"id\"\n            :prepend-icon=\"props.icon\"\n            v-model=\"value\" v-bind=\"attrs\"/>\n    </template>\n</template>\n<script setup lang=\"ts\">\n/**\n * This component displays a v-select box containing available agents\n * for the provided user (if none provided, use `inject(\"user\")` to get\n * current user.\n */\nimport { computed, defineModel, defineExpose, inject, useAttrs, onMounted, ref, watch} from 'vue'\nimport { query } from 'ox'\nimport { useAgents } from '../composables'\n\nconst attrs = useAttrs()\nconst props = defineProps({\n    /** Get agents for this user */\n    user: {type: Object, default: null},\n    /** If True, use v-menu instead */\n    menu: Boolean,\n    /** Prepend icon */\n    icon: {type: String, default: \"mdi-account-key\"},\n})\nconst value = defineModel()\nconst repos = useAgents()\nconst items = ref([])\nconst item = ref(null)\n\nvar last = null\n\nconst user = inject('user')\n\nasync function fetch(userId) {\n    if(userId && userId != last) {\n        last = userId\n        const resp = await query(repos.agents).fetch({path: '/user', params: {user: userId}})\n        items.value = resp.response.data\n        item.value = items.value.find((v) => v.user == userId)\n        value.value = item.value.id\n    }\n}\n\nonMounted(() => fetch(props.user?.id || user.id))\nwatch(() => props.user, (val) => fetch(val?.id || user.id))\nwatch(value, (val) => {\n    item.value = items.value.find((v) => v.id == val)\n})\n\ndefineExpose({ value, item, items })\n</script>\n","<template>\n    <ox-model-panel v-bind=\"attrs\">\n        <template v-for=\"(_, name) in slots\" :key=\"name\" #[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\" :owner=\"agent?.item\" v-if=\"name != 'app-bar-right'\"/>\n        </template>\n\n        <template #app-bar-right=\"{panel, list, ...bind}\">\n            <ox-agent-select ref=\"agent\" v-model=\"list.filters.owner__uuid\" :user=\"user\"\n                menu :disabled=\"panel.view.startsWith('detail')\"\n            />\n            <slot name=\"app-bar-right\" :panel=\"panel\" :list=\"list\" :owner=\"agent?.item\" v-bind=\"bind\"/>\n        </template>\n    </ox-model-panel>\n</template>\n<script setup lang=\"ts\">\nimport { useAttrs, ref, inject, useSlots } from 'vue'\nimport {OxModelPanel} from 'ox/components'\nimport OxAgentSelect from './OxAgentSelect'\n\nconst slots = useSlots()\nconst attrs = useAttrs()\nconst user = inject('user')\nconst agent = ref(null)\n</script>\n","import {App} from 'ox/components'\nimport * as components from './components'\n\nexport default {\n    extends: App,\n    components,\n}\n","import {init, createPinia} from 'ox'\nimport App from './app'\n\nconst pinia = createPinia()\ninit({App, plugins: [pinia] })\n"],"names":["repos","useAuthModels","user","inject","props","__props","users","computed","k","_a","slots","useSlots","attrs","useAttrs","value","_useModel","useAgents","items","ref","item","last","fetch","userId","resp","query","v","onMounted","watch","val","__expose","agent","App","components","pinia","createPinia","init"],"mappings":"g9BAiCA,MAAMA,EAAQC,EAAc,EACtBC,EAAOC,EAAO,MAAM,EACpBC,EAAQC,26BCJd,MAAML,EAAQG,EAAO,OAAO,EACtBC,EAAQC,EAIRC,EAAQC,EAAS,IAAMP,EAAM,MAAM,MAAM,YAAcQ,GAAC,OAAK,OAAAA,GAAA,YAAAA,EAAG,UAASC,EAAAL,EAAM,QAAN,YAAAK,EAAa,IAAG,EAAE,IAAK,CAAA,svBCRtG,MAAMC,EAAQC,EAAS,EAEjBX,EAAQC,EAAc,EACtBG,EAAQC,seCJd,MAAMO,EAAQC,EAAS,EACjBT,EAAQC,EAQRS,EAAQC,GAAYV,EAAA,YAAA,EACpBL,EAAQgB,EAAU,EAClBC,EAAQC,EAAI,EAAE,EACdC,EAAOD,EAAI,IAAI,EAErB,IAAIE,EAAO,KAEL,MAAAlB,EAAOC,EAAO,MAAM,EAE1B,eAAekB,EAAMC,EAAQ,CACtB,GAAAA,GAAUA,GAAUF,EAAM,CAClBA,EAAAE,EACP,MAAMC,EAAO,MAAMC,EAAMxB,EAAM,MAAM,EAAE,MAAM,CAAC,KAAM,QAAS,OAAQ,CAAC,KAAMsB,GAAQ,EAC9EL,EAAA,MAAQM,EAAK,SAAS,KACvBJ,EAAA,MAAQF,EAAM,MAAM,KAAMQ,GAAMA,EAAE,MAAQH,CAAM,EAC/CR,EAAA,MAAQK,EAAK,MAAM,EAAA,CAC7B,CAGJ,OAAAO,GAAU,IAAM,OAAA,OAAAL,IAAMZ,EAAAL,EAAM,OAAN,YAAAK,EAAY,KAAMP,EAAK,EAAE,EAAC,EAC1CyB,EAAA,IAAMvB,EAAM,KAAOwB,GAAQP,GAAMO,GAAA,YAAAA,EAAK,KAAM1B,EAAK,EAAE,CAAC,EACpDyB,EAAAb,EAAQc,GAAQ,CACbT,EAAA,MAAQF,EAAM,MAAM,KAAMQ,GAAMA,EAAE,IAAMG,CAAG,CAAA,CACnD,EAEDC,EAAa,CAAE,MAAAf,EAAO,KAAAK,EAAM,MAAAF,CAAA,CAAO,inBC1CnC,MAAMP,EAAQC,EAAS,EACjBC,EAAQC,EAAS,EACjBX,EAAOC,EAAO,MAAM,EACpB2B,EAAQZ,EAAI,IAAI,+wBCnBPa,GAAA,CACX,QAASA,EACT,WAAAC,EACJ,ECHMC,GAAQC,EAAY,EAC1BC,EAAK,CAAC,IAAAJ,GAAK,QAAS,CAACE,EAAK,EAAG"}
