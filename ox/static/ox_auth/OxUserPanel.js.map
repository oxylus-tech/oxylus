{"version":3,"file":"OxUserPanel.js","sources":["../../../assets/ox_auth/src/components/OxPermissionsEdit.vue","../../../assets/ox_auth/src/components/OxPasswordEdit.vue","../../../assets/ox_auth/src/components/OxUserEdit.vue","../../../assets/ox_auth/src/composables.ts","../../../assets/ox_auth/src/components/OxUserPanel.vue"],"sourcesContent":["<template>\n    <v-table class=\"mb-2 \" density=\"compact\">\n        <thead>\n            <tr class=\"border-b-md font-weight-bold\">\n                <th class=\"font-weight-bold\">Element</th>\n                <template v-for=\"label of crudLabels\">\n                    <th>{{ label }}</th>\n                </template>\n            </tr>\n        </thead>\n        <tbody>\n            <template v-for=\"(cts, label) in contentTypes\">\n                <tr>\n                   <th colspan=\"6\">{{ label }}</th>\n                </tr>\n                <template v-for=\"ct in cts\">\n                    <tr>\n                        <td class=\"text-top\">{{ ct.model_verbose }}</td>\n                        <template v-for=\"perm in ctPermissions[ct.id].crud\">\n                            <td>\n                                <v-checkbox-btn color=\"primary\" class=\"mb-2 d-inline\"\n                                    v-model=\"model\" :value=\"perm.id\">\n                                </v-checkbox-btn>\n                                <template v-if=\"user\">\n                                    <template v-if=\"groupPermissions[perm.id]\">\n                                        <template v-for=\"group of groupPermissions[perm.id]\">\n                                            <v-chip size=\"x-small\" density=\"comfortable\" prepend-icon=\"mdi-check\" class=\"mb-2\" color=\"primary\">\n                                                {{ group.name }}\n                                            </v-chip>\n                                        </template>\n                                    </template>\n                                    <template v-if=\"user.is_superuser\">\n                                        <v-chip size=\"x-small\" density=\"comfortable\" prepend-icon=\"mdi-check\" class=\"mb-2\" color=\"primary\">\n                                            Super User\n                                        </v-chip>\n\n                                    </template>\n                                </template>\n                            </td>\n                        </template>\n                    </tr>\n                    <template v-if=\"ctPermissions[ct.id].extra\">\n                        <tr>\n                            <td></td>\n                            <td colspan=\"4\">\n                                <template v-for=\"perm in ctPermissions[ct.id].extra\">\n                                    <div>\n                                        <v-checkbox-btn color=\"primary\" class=\"mb-2\"\n                                            :label=\"perm.name\"\n                                            v-model=\"value\" :value=\"perm.id\">\n                                        </v-checkbox-btn>\n                                        <template v-if=\"user && groupPermissions[perm.id]\">\n                                            <template v-for=\"group of groupPermissions[perm.id]\">\n                                                <v-chip size=\"x-small\" density=\"comfortable\" prepend-icon=\"mdi-check\" class=\"mb-2\" color=\"primary\">\n                                                    {{ group.name }}\n                                                </v-chip>\n                                            </template>\n                                        </template>\n                                    </div>\n                                </template>\n                            </td>\n                        </tr>\n                    </template>\n                </template>\n            </template>\n        </tbody>\n    </v-table>\n</template>\n<style scoped>\ntbody th { font-weight: 600 !important; }\ntbody td { vertical-align: baseline; }\ntbody td:not(:first-child) {\n    border-left: 2px rgba(var(--v-border-color), var(--v-border-opacity)) solid;\n}\n\n</style>\n<script setup>\nimport { inject, computed, ref, defineProps, defineModel, toRefs } from 'vue'\nimport { VChip } from 'vuetify/components/VChip'\nimport { VTable } from 'vuetify/components/VTable'\nimport { VCheckboxBtn } from 'vuetify/components/VCheckbox'\nimport { VSpacer } from 'vuetify/components'\n\n\nconst repos = inject(\"repos\")\nconst models = inject(\"models\")\n\n\nconst model = defineModel()\nconst {user, group} = defineProps({\n    /**\n    * User model instance to edit permissions from.\n    * It must be loaded with `groups`.\n    */\n    user: {type: Object, default: null},\n    /**\n    * Group model instance to edit permissions from when `user` is not provided.\n    */\n    group: {type: Object, default: null},\n})\n\n\nconst cts = repos.contentTypes.with(\"permissions\").get()\n\n/**\n * All models that are linked to permissions grouped by application `verbose_name`.\n */\nconst contentTypes = Object.groupBy(cts, (ct) => ct.app_verbose)\n\n\n/**\n * When `user` is provided, a dict of `{permission_id: [...group]}`.\n * Give info from which group user has the permission from.\n */\nconst groupPermissions = computed(() => {\n    if(!user)\n        return null\n\n    const results = {}\n    const groups = repos.groups.whereId(user.groups_id).get()\n    for(var group of groups)\n        for(var id of group.permissions_id)\n            results[id] = [...(results[id] || []), group]\n    return results\n})\n\n\nconst crudLabels = [\"View\", \"Add\", \"Change\", \"Delete\"]\nconst crudActions = [\"view\", \"add\", \"change\", \"delete\"]\nconst ctPermissions = computed(() => {\n    const result = []\n    for(var ct of cts) {\n        const crud = crudActions.map(a => ct.getPermission(a))\n        const extra = ct.permissions.filter(p => !crudActions.includes(p.action))\n\n        result[ct.id] = {crud, extra}\n    }\n    return result\n})\n\n\n</script>\n","<template>\n    <ox-state-alert :state=\"state\"/>\n    <v-text-field variant=\"underlined\"\n        label=\"Enter password\" v-model=\"password.value\"\n        :type=\"password.value ? 'text' : 'password'\"\n        :append-icon=\"password.value ? 'mdi-eye' : 'mdi-eye-off'\"\n        @click:append=\"password.value = !password.value\"\n        />\n    <v-text-field variant=\"underlined\"\n        label=\"Confirm password\" v-model=\"confirm.value\"\n        :color=\"valid ? 'success' : 'error'\"\n        :type=\"confirm.show ? 'text' : 'password'\"\n        :append-icon=\"confirm.show ? 'mdi-eye' : 'mdi-eye-off'\"\n        @click:append=\"confirm.show = !confirm.show\"\n        >\n        <template v-if=\"(password.value || confirm.value) && !valid\" #details>\n            <div class=\"password-error\">Provided passwords are not the same.</div>\n        </template>\n    </v-text-field>\n    <div class=\"text-right mt-3\">\n        <slot name=\"default\" :valid=\"valid\" :value=\"password.value\">\n            <ox-validation-btn v-if=\"password.value\"\n                @validate=\"save()\" @reset=\"reset()\"\n                :state=\"state\" :validate-disabled=\"!valid\"/>\n        </slot>\n    </div>\n</template>\n<style>\n.password-error {\n    color: rgb(var(--v-theme-error));\n}\n</style>\n<script setup>\nimport {computed, inject, ref, reactive, defineModel, defineProps} from 'vue'\n\nimport {OxStateAlert, OxValidationBtn} from 'ox/components'\nimport {State} from 'ox'\n\nconst repos = inject(\"repos\")\nconst props = defineProps({\n    user: {type: Object},\n})\n\nconst emit = defineEmits(['save', 'saved'])\nconst password = reactive({ value: '', show: false, })\nconst confirm = reactive({ value: '', show: false, })\nconst state = reactive(new State())\n\nconst valid = computed(() => (password.value && confirm.value && password.value == confirm.value))\n\nfunction reset() {\n    password.value = \"\";\n    confirm.value = \"\";\n    state.none()\n}\n\nasync function save() {\n    state.processing()\n    try {\n        const resp = await repos.users.api().updatePassword(props.user.id, password.value)\n        if(resp.response.status == 200) {\n            password.value = \"\"\n            confirm.value = \"\"\n            state.ok(resp.response)\n        }\n        else {\n            state.error(resp.response.data)\n        }\n    }\n    catch(error) {\n        state.error(error?.message || error)\n    }\n}\n</script>\n","<template>\n    <v-container>\n        <ox-state-alert :state=\"editor.state\"/>\n        <div class=\"mb-3\">\n            <ox-validation-btn v-if=\"editor.edited\"\n                @validate=\"editor.save()\" @reset=\"editor.reset()\" :state=\"editor.state\" :validate-disabled=\"!form.isValid\"/>\n        </div>\n        <v-expansion-panels mandatory multiple :model-value=\"['info']\">\n            <v-expansion-panel title=\"Information\" value=\"info\">\n                <template #text>\n                    <v-form ref=\"form\" v-model=\"editor.valid\">\n                        <v-text-field variant=\"underlined\" label=\"User Name\"\n                            v-model=\"editor.value.username\"\n                            :rules=\"[usernameRule]\">\n                            <template #details>\n                                <ox-field-details :errors=\"editor.errors?.username\"/>\n                            </template>\n                        </v-text-field>\n                        <v-text-field variant=\"underlined\" label=\"First Name\"\n                            v-model=\"editor.value.first_name\" >\n                            <template #details>\n                                <ox-field-details :errors=\"editor.errors?.first_name\"/>\n                            </template>\n                        </v-text-field>\n                        <v-text-field variant=\"underlined\" label=\"Last Name\"\n                            v-model=\"editor.value.last_name\" >\n                            <template #details>\n                                <ox-field-details :errors=\"editor.errors?.last_name\"/>\n                            </template>\n                        </v-text-field>\n                        <v-text-field variant=\"underlined\" type=\"email\" label=\"Email\"\n                            v-model=\"editor.value.email\">\n                            <template #details>\n                                <ox-field-details :errors=\"editor.errors?.email\"/>\n                            </template>\n                        </v-text-field>\n\n                        <v-select multiple\n                            label=\"Groups\"\n                            v-model=\"editor.value.groups_id\"\n                            :items=\"groups\"\n                            item-title=\"name\" item-value=\"id\"/>\n                    </v-form>\n                </template>\n            </v-expansion-panel>\n            <v-expansion-panel title=\"User permissions\" v-if=\"editor.value.id\">\n                <template #text>\n                    <v-expansion-panel-text>\n                        <ox-permissions-edit :user=\"editor.value\"\n                            v-model=\"editor.value.permissions_id\"/>\n                    </v-expansion-panel-text>\n                </template>\n            </v-expansion-panel>\n            <v-expansion-panel title=\"Password reset\" v-if=\"editor.value.id\">\n                <template #text>\n                    <v-expansion-panel-text>\n                        <ox-password-edit :user=\"props.initial\" @saved=\"\"/>\n                    </v-expansion-panel-text>\n                </template>\n            </v-expansion-panel>\n        </v-expansion-panels>\n    </v-container>\n</template>\n<script setup lang=\"ts\">\nimport {defineProps, defineEmits, inject, toRefs, reactive, useTemplateRef, watch} from 'vue'\n\nimport { modelEditor } from \"ox\"\nimport type {User, ModelEditor} from 'ox'\nimport {OxFieldDetails, OxStateAlert, OxValidationBtn} from 'ox/components'\n\nimport OxPermissionsEdit from './OxPermissionsEdit.vue'\nimport OxPasswordEdit from './OxPasswordEdit.vue'\n\n\nconst emits = defineEmits<{\n    saved: [item: User, editor: ModelEditor]\n}>()\nconst repos = inject('repos')\nconst groups = repos.groups.all()\n\nconst props = defineProps({\n    initial: Object,\n    saved: Function,\n})\nconst {initial} = toRefs(props)\nconst form = useTemplateRef('form')\n\nconst panel = inject(\"panel\")\nconst editor = modelEditor({\n    name: \"account-editor\",\n    panel, initial, emits,\n    repo: repos.users,\n})\n\nfunction usernameRule(value) {\n    const allowed = /^[A-Za-z0-9@.+\\-_]+$/\n    return allowed.test(value) || \"Username must not be empty. It only can contain letters, numbers and @/+/./- special characters\"\n}\n</script>\n","import {models as oxModels, useModels} from 'ox'\n\nexport function useAuthModels(extra_models : Array<models.Model> =[]) : Object {\n    const {repos, models} = useModels([\n        oxModels.User, oxModels.Group, oxModels.Permission, oxModels.ContentType,\n        ...extra_models\n    ])\n\n    repos.contentTypes.api().get(\"ox/core/content_type/\")\n    repos.permissions.api().get(\"ox/core/permission/\")\n\n    return {repos, models}\n}\n","<template>\n    <ox-model-panel :name=\"props.name\" :tabbed=\"props.tabbed\"\n            icon=\"mdi-account\" :repo=\"repos.users\"\n            :headers=\"props.headers\"\n            :relations=\"props.relations\"\n            search=\"search\">\n        <template v-for=\"name in forwardSlots\" :key=\"name\" #[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\"/>\n        </template>\n\n        <template #list.filters=\"{list,filters}\">\n            <v-select class=\"ml-3\" density=\"compact\"\n                v-model=\"filters.groups__id__in\" multiple\n                label=\"Groups\"\n                :items=\"groups\" item-title=\"$title\" item-value=\"id\"\n                hide-details />\n\n            <slot name=\"list.filters\" :list=\"list\" :filters=\"filters\"/>\n        </template>\n\n        <template #item.groups=\"{item}\" v-if=\"!slots['item.groups']\">\n             <v-chip color=\"primary\" v-for=\"group of item.groups\" variant=\"tonal\" class=\"mr-2\">\n                 {{ group.name }}\n             </v-chip>\n        </template>\n\n        <template #views.list.kanban=\"{panel,items,list}\">\n            <ox-list-kanban :items=\"items\" field=\"groups_id\" :headers=\"kanbanHeaders\"\n                item-title=\"username\"\n                @click=\"(item) => panel.reset('.edit', item)\"/>\n        </template>\n\n        <template #views.add=\"{value,saved}\"\n                v-if=\"!slots['views.add'] && context.user.can('auth.add_user')\">\n            <ox-user-edit :initial=\"value\" @saved=\"saved\"/>\n        </template>\n\n        <template #views.edit.window.default=\"{value}\"\n                v-if=\"context.user.can('auth.change_user')\">\n            <ox-user-edit :initial=\"value\"/>\n        </template>\n    </ox-model-panel>\n</template>\n<script setup>\nimport { computed, defineProps, inject, useSlots } from 'vue'\n\nimport { useModels, useModelPanelProps, api } from 'ox'\nimport {OxModelPanel, OxListKanban} from 'ox/components'\n\nimport {useAuthModels} from '../composables'\nimport OxUserEdit from './OxUserEdit.vue'\n\nconst context = inject('context')\nconst slots = useSlots()\nconst forwardSlots = Object.keys(slots).filter(x => !(['list.filters', 'item.groups'].includes(x)))\n\nconst {repos, models} = useAuthModels()\nconst query = api.query(repos)\n\nquery('groups').all({dataKey: 'results'})\n\nconst groups = computed(() => repos.groups.all())\nconst kanbanHeaders = computed(() => {\n    return [\n        {title: 'Without group', value: null},\n        ...groups.value.map((group) => ({title: group.name, value: group.id}))\n    ]\n})\n\nconst props = defineProps(\n    useModelPanelProps({\n        name: 'user-panel',\n        relations: ['groups'],\n        headers: [\n            {key: 'id', title: 'Id'},\n            {key: 'username', title: 'Username'},\n            {key: 'first_name', title: 'First_name'},\n            {key: 'last_name', title: 'Last_name'},\n            {key: 'email', title: 'Email'},\n            {key: 'groups', title: 'Groups'},\n        ]\n    })\n)\n</script>\n"],"names":["repos","inject","model","_useModel","cts","contentTypes","ct","groupPermissions","computed","__props","results","groups","group","id","crudLabels","crudActions","ctPermissions","result","crud","a","extra","p","props","password","reactive","confirm","state","State","valid","reset","save","resp","error","emits","__emit","initial","toRefs","form","useTemplateRef","panel","editor","modelEditor","usernameRule","value","useAuthModels","extra_models","models","useModels","oxModels","context","slots","useSlots","forwardSlots","x","api","kanbanHeaders"],"mappings":"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"}
