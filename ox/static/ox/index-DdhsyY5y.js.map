{"version":3,"file":"index-DdhsyY5y.js","sources":["../../../assets/ox/src/components/OxAction.vue","../../../assets/ox/src/components/OxActionModelDelete.vue","../../../assets/ox/src/components/OxActions.vue","../../../assets/ox/src/components/OxApp.vue","../../../assets/ox/src/components/OxComponent.vue","../../../assets/ox/src/components/OxFieldDetails.vue","../../../assets/ox/src/components/OxListFilters.vue","../../../assets/ox/node_modules/vuetify/lib/components/VSlideGroup/VSlideGroupItem.mjs","../../../assets/ox/src/components/OxListKanban.vue","../../../assets/ox/src/components/OxListTable.vue","../../../assets/ox/src/components/OxStateAlert.vue","../../../assets/ox/src/components/OxValidationBtn.vue","../../../assets/ox/src/components/OxLogin.vue","../../../assets/ox/src/components/OxPanelSheet.vue","../../../assets/ox/src/components/OxPanel.vue","../../../assets/ox/src/components/OxModelEdit.vue","../../../assets/ox/src/components/OxModelPanel.vue","../../../assets/ox/src/components/OxPanelNav.vue"],"sourcesContent":["<template>\n    <template v-if=\"allowed\">\n        <v-btn v-if=\"props.button\" variant=\"text\"\n            :color=\"props.color\" :icon=\"props.icon\"\n            :title=\"props.title\" :aria-label=\"props.title\"\n            @click.stop=\"run\">\n        </v-btn>\n        <v-list-item v-else\n            :title=\"props.title\" :base-color=\"props.color\" :prepend-icon=\"props.icon\"\n            @click.stop=\"run\"/>\n    </template>\n</template>\n<script setup lang=\"ts\">\nimport {computed, defineProps, defineEmits, inject, toRefs} from 'vue'\nimport {useAction} from '../composables'\n\nimport type {IPermission, Model} from '../models'\nimport type {ActionRun, ActionCompleted} from '../composables'\n\nconst props = defineProps<{\n    /**\n     * @property {Model} value - value or model instance.\n     */\n    item: Model\n    /**\n     * @property {String} text - text displayed to user.\n     */\n    title: string\n    /**\n     * @property {String} icon\n     */\n    icon: string\n    /**\n     * @property {String} color\n     */\n    color?: string\n    /**\n     * @property {Boolean} button - display action as a small button\n     */\n    button?: boolean\n    /**\n     * @property {String} confirm - if provided ask user for confirmation before\n     * executing the action.\n     */\n    confirm?: string\n    /**\n     * @property {Array<string | Function>} permissions - required permission to run the action\n     */\n    permissions: IPermission\n    /**\n     * @property {ActionRun} run: function to call when action is executed\n     */\n    run: ActionRun\n}>()\n\n\nconst emits = defineEmits<{\n    completed: ActionCompleted\n}>()\nconst context = inject('context')\nconst {processing, permissions, allowed, run} = useAction(props, {user: context.user, emits})\n</script>\n","<template>\n    <ox-action\n        :item=\"props.item\" :button=\"props.button\"\n        icon=\"mdi-delete\" color=\"error\"\n        :title=\"t('actions.delete')\" :confirm=\"t('actions.delete.confirm')\"\n        :permissions=\"['delete', (u, o) => o.id]\"\n        :run=\"run\" @completed=\"panel?.reset('')\"\n    />\n</template>\n<script setup lang=\"ts\">\nimport { defineProps, inject } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nimport { makeModelApiAction } from '../composables/actions'\nimport OxAction from './OxAction.vue'\n\nconst { t } = useI18n()\nconst panel = inject('panel')\nconst repos = inject('repos')\n\nconst props = defineProps<{\n    item: Object\n    button?: boolean\n}>()\n\nconst run = makeModelApiAction({\n    repo: repos[props.item.constructor.entity],\n    method: 'delete',\n    options: (user, item) => ({delete: props.item.id}),\n})\n</script>\n","<template>\n    <slot name=\"before\" v-bind=\"props\"></slot>\n    <slot name=\"default\" v-bind=\"props\"></slot>\n    <slot name=\"after\" v-bind=\"props\"></slot>\n</template>\n<script setup>\nimport {computed, defineProps, inject, toRefs, useSlots} from 'vue'\n\nconst slots = useSlots()\nconst props = defineProps({\n    // Action's Props\n    value: Object,\n    dense: {type: Boolean, default: false},\n    button: {type: Boolean, default: false},\n    exclude: {type: Array},\n})\n</script>\n","<template>\n    <v-app>\n        <v-app-bar color=\"primary\">\n            <template v-slot:prepend>\n                <v-app-bar-nav-icon icon=\"mdi-apps\"\n                    :title=\"t('nav.panels')\" :aria-label=\"t('nav.panels')\"\n                    @click.stop=\"nav.drawer = !nav.drawer\"/>\n                <v-app-bar-nav-icon v-if=\"slots['app-nav'] && !nav.drawer2\"\n                    icon=\"mdi-menu\"\n                    @click=\"nav.drawer2 = true; nav.drawer = false\"/>\n            </template>\n            <v-app-bar-title>\n                <template v-if=\"context.panel?.title\">\n                    <v-icon v-if=\"context.panel.icon\" :icon=\"context.panel.icon\" />\n\n                    {{ context.panel.title }}\n                </template>\n                <template v-else>\n                    <slot name=\"title\" :context=\"context\"/>\n                </template>\n            </v-app-bar-title>\n            <v-spacer/>\n            <div id=\"app-bar-right\" class=\"mr-3\"></div>\n            <slot name=\"app-bar-right\" :context=\"context\"></slot>\n        </v-app-bar>\n        <v-navigation-drawer theme=\"dark\" v-model=\"nav.drawer\" v-if=\"slots['nav-list']\">\n            <slot name=\"nav-start\" :context=\"context\"></slot>\n            <slot name=\"nav-list\" :context=\"context\"></slot>\n            <slot name=\"nav-end\" :context=\"context\"></slot>\n            <template #append v-if=\"slots['app-nav']\">\n                <div class=\"text-right pa-3\">\n                </div>\n            </template>\n        </v-navigation-drawer>\n        <v-main>\n            <v-tabs-window v-model=\"context.panel.name\">\n                <slot name=\"default\" :context=\"context\"></slot>\n            </v-tabs-window>\n        </v-main>\n    </v-app>\n</template>\n<script setup lang=\"ts\">\nimport { useSlots, withDefaults } from 'vue'\nimport { computed, defineProps, inject, provide, reactive, watch } from 'vue'\n\nimport {useAppContext} from '../composables'\nimport type {Model} from '../models'\n\n// we force ox_core locales to be loaded\nimport { useI18n } from '../composables'\nconst { t } = useI18n()\n\nconst slots = useSlots()\n\ninterface Props {\n    apiUrl?: string\n    dataEl?: string\n    models?: Model[]\n    data?: object\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    dataEl: document.body.dataset?.appData\n})\n\nconst nav = reactive({\n    drawer: true,\n})\n\nconst context = useAppContext(props)\n</script>\n","<script>\nimport { h, computed, shallowRef, watch } from 'vue'\nimport { defineAsyncComponent } from '../composables'\n\nexport default {\n    props: {\n        src: String,\n        is: String,\n    },\n\n    setup(props) {\n        const component = shallowRef(null)\n\n        const is = computed(() => {\n            if(props.is)\n                return props.is\n\n            let name = props.src.substring(props.src.lastIndexOf('/')+1)\n            if(name)\n                name = name.substring(0, name.indexOf('.'))\n            if(!name)\n                throw Error(\n                    \"`is` not provided and could not be deducted from `src`.\"\n                )\n            return name\n        })\n\n        function reset() {\n            component.value = defineAsyncComponent(props.src, is.value)\n        }\n\n        watch(() => props.src, reset)\n\n        reset()\n        return () => h(component.value, props)\n    },\n}\n</script>\n","<template>\n    <template v-if=\"props.errors\">\n        <div class=\"password-error\" v-for=\"error in props.errors\">\n            <v-icon icon=\"mdi-alert-circle-outline\"/>\n            {{ error }}\n        </div>\n    </template>\n</template>\n<script setup>\nimport {defineProps} from 'vue'\n\nconst props = defineProps({\n    state: Object,\n    errors: Array\n})\n</script>\n","<template>\n    <form @submit.prevent=\"list.fetch()\" class=\"width-full\">\n        <v-toolbar dense color=\"transparent\">\n            <v-app-bar-nav-icon :icon=\"icon\" readonly/>\n            <v-text-field v-if=\"props.search && props.list.filters\"\n                :label=\"t('filters.search')\" density=\"compact\" class=\"ml-2\"\n                v-model=\"props.list.filters[props.search]\"\n                hide-details/>\n            <slot :list=\"list\" :filters=\"list.filters\"/>\n            <v-btn @click.stop=\"list.fetch()\" class=\"ml-2\" icon=\"mdi-check\"\n                :aria-label=\"$t('filters.apply')\"\n                :title=\"t('filters.apply')\"\n            />\n            <v-btn v-if=\"hasFilters\" @click.stop=\"reset\" icon=\"mdi-backspace\"\n                :aria-label=\"t('filters.reset')\"\n                :title=\"t('filters.reset')\"\n            />\n        </v-toolbar>\n    </form>\n</template>\n<script setup>\nimport { computed, defineProps, defineExpose } from 'vue'\nimport { useI18n } from '../composables'\nconst { t } = useI18n()\n\nconst props = defineProps({\n    search: String,\n    list: Object,\n})\n\nconst hasFilters = computed(() => {\n    return props.list.filters && Object.entries(props.list.filters).some(([k,v]) => !k.startsWith('page') && !k.startsWith('ordering') && !!v)\n})\nconst icon = computed(() => hasFilters.value ? 'mdi-filter-check' : 'mdi-filter-outline')\n\nfunction reset() {\n    props.list.filters = {}\n    props.list.fetch()\n}\n\ndefineExpose({ icon, hasFilters, reset})\n</script>\n","// Composables\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\"; // Utilities\nimport { VSlideGroupSymbol } from \"./VSlideGroup.mjs\";\nimport { genericComponent } from \"../../util/index.mjs\"; // Types\nexport const VSlideGroupItem = genericComponent()({\n  name: 'VSlideGroupItem',\n  props: makeGroupItemProps(),\n  emits: {\n    'group:selected': val => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const slideGroupItem = useGroupItem(props, VSlideGroupSymbol);\n    return () => slots.default?.({\n      isSelected: slideGroupItem.isSelected.value,\n      select: slideGroupItem.select,\n      toggle: slideGroupItem.toggle,\n      selectedClass: slideGroupItem.selectedClass.value\n    });\n  }\n});\n//# sourceMappingURL=VSlideGroupItem.mjs.map","<template>\n    <v-sheet>\n    <v-slide-group>\n        <v-slide-group-item v-for=\"(header, idx) in props.headers\" :key=\"header.value\"\n            v-slot=\"{selectedClass}\">\n            <v-card width=\"400\" :class=\"['ma-3', selectedClass]\"\n                    :color=\"color(idx)\" lines=\"two\">\n                <v-card-title>{{ header.title }}</v-card-title>\n                <v-list :bg-color=\"color(idx)\">\n                    <template v-if=\"sorted && sorted[header.value]\">\n                        <template v-for=\"item in sorted[header.value]\" :key=\"item.id\">\n                            <slot name=\"item\" :header=\"header\" :item=\"item\">\n                                <v-list-item :title=\"item[props.itemTitle]\"\n                                        :value=\"props.itemValue && item[props.itemValue]\"\n                                        @click=\"emits('click', item)\">\n                                    <template #append>\n                                        <slot name=\"item.action\"></slot>\n                                    </template>\n                                </v-list-item>\n                            </slot>\n                        </template>\n                    </template>\n                </v-list>\n            </v-card>\n        </v-slide-group-item>\n    </v-slide-group>\n    </v-sheet>\n</template>\n<script setup>\nimport { computed, defineEmits, defineProps } from 'vue'\n\nconst emits = defineEmits(['click'])\nconst props = defineProps({\n    items: Array,\n    itemTitle: String,\n    itemValue: String,\n    field: String,\n    headers: Array,\n    colors: {type: Array, default: () => [\n        'purple', 'blue', 'teal', 'lime', 'orange', 'blue-gray',\n        'pink', 'indigo', 'cyan', 'light-green', 'amber', 'brown',\n        'red', 'deep-purple', 'light-blue', 'green', 'yellow', 'deep-orange'\n    ]},\n    colorVariant: {type: String, default: 'lighten-2'},\n})\n\n\nfunction color(idx) {\n    idx = idx % props.colors.length\n    if(props.colorVariant)\n        return props.colors[idx] + '-' + props.colorVariant\n    return props.colors[idx]\n}\n\n\nfunction assign(result, item, val) {\n    if(result[val])\n        !result[val].includes(item) && result[val].push(item)\n    else\n        result[val] = [item]\n}\n\nconst sorted = computed(() => {\n    const result = {}\n    if(props.items)\n        for(var item of props.items) {\n            const vals = item[props.field]\n            if(Array.isArray(vals)) {\n                if(vals.length)\n                    for(var val of vals)\n                        assign(result, item, val)\n                else\n                    assign(result, item, null)\n            }\n            else\n                assign(result, item, vals)\n        }\n    return result\n})\n</script>\n","<template>\n    <v-data-table-server\n            :items=\"props.list.items\" item-index=\"id\" :items-length=\"props.list.count || props.list.items.length\"\n            :loading=\"props.list.state?.isProcessing\"\n            :headers=\"props.headers\"\n            @update:options=\"updateOptions\">\n        <template v-slot:loading>\n            <v-skeleton-loader type=\"table-row@10\"></v-skeleton-loader>\n        </template>\n\n        <template v-for=\"(_, name) in itemSlots\" :key=\"name\" v-slot:[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\"/>\n        </template>\n\n        <template #item.actions=\"{item}\">\n            <ox-action v-if=\"edit\"\n                icon=\"mdi-pencil\" button\n                :title=\"t('actions.edit')\"\n                @click.stop=\"panel.reset('.edit', item)\"\n                :permissions=\"permissions\"\n                :item=\"item\"\n                :run=\"runEdit\"/>\n            <slot name=\"item.actions\" :value=\"item\" :dense=\"true\" :button=\"true\"/>\n        </template>\n    </v-data-table-server>\n</template>\n<script setup lang=\"ts\">\nimport { defineProps, inject, useSlots } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nimport OxAction from './OxAction.vue'\nimport { Permissions } from '../models'\nimport { filterSlots } from '../utils'\n\nconst { t } = useI18n()\nconst slots = useSlots()\nconst itemSlots = filterSlots(slots, 'item.', {exclude: ['item.actions']})\n\nconst panel = inject('panel')\nconst permissions = new Permissions('change')\nconst props = defineProps({\n    list: Object,\n    headers: Array,\n    edit: Boolean,\n})\n\n\nfunction updateOptions(event) {\n    return props.list.fetch({\n        filters: {\n            \"page\": event.page,\n            \"page_size\": event.itemsPerPage,\n            \"ordering\": event.sortBy.map(({key, order}) => order == 'asc' ? key : `-${key}`)\n        }\n    })\n}\n\nfunction runEdit(user, item) {\n    panel.reset('.edit', item)\n}\n</script>\n","<template>\n    <v-alert v-if=\"props.state.isNone && slots.none\" type=\"info\" variant=\"outline\" class=\"mb-3\"\n            :state=\"state\" :title=\"noneTitle\">\n        <slot name=\"none\" :state=\"state\"></slot>\n    </v-alert>\n    <v-alert v-else-if=\"displayProcessing\" type=\"info\" variant=\"tonal\" class=\"mb-3\" closable\n            :state=\"state\" :title=\"processingTitle\">\n        <slot name=\"processing\" :state=\"state\">\n            Data are being sent to server, please be patient. If this message persist you might wan't to retry.\n        </slot>\n    </v-alert>\n    <v-alert v-else-if=\"props.state.isError\" type=\"error\" variant=\"tonal\" class=\"mb-3\" closable\n            :state=\"state\" :title=\"errorTitle\" >\n        <slot name=\"error\" :state=\"state\">\n            Oups... something wrong happened.\n        </slot>\n        <slot name=\"error-detail\" :state=\"state\">\n        </slot>\n    </v-alert>\n    <v-alert v-else-if=\"props.state.isOk\" type=\"success\" variant=\"tonal\" class=\"mb-3\" closable\n            :state=\"state\" :title=\"okTitle\">\n        <slot name=\"ok\" :state=\"state\">\n            <p>Congrats! Data have been updated.</p>\n        </slot>\n        <template v-if=\"messages\">\n            <v-divider/>\n            <p v-for=\"message in messages\">{{ message }}</p>\n        </template>\n        <slot name=\"ok-detail\" :state=\"state\"></slot>\n    </v-alert>\n    <slot :state=\"props.state\"></slot>\n</template>\n<script setup>\n// TODO: expandable detail error\nimport {defineProps, useSlots, computed, ref, watch} from 'vue'\nimport {VAlert} from 'vuetify/components/VAlert'\nimport {States} from '../utils/state'\n\nconst slots = useSlots()\nconst props = defineProps({\n    state: Object,\n    delay: {type: Boolean, default: false},\n    okTitle: {type: String, default: \"\"},\n    noneTitle: {type: String, default: \"\"},\n    errorTitle: {type: String, default: \"Oups...\"},\n    processingTitle: {type: String, default: \"Processing...\"},\n})\n\n\nlet timeoutId = null\nlet expired = ref(false)\n\nwatch(() => props.state.state, (val) => {\n    if(timeoutId !== null)\n        window.clearTimeout(timeoutId)\n\n    if(!props.delay)\n        return\n\n    if(val == States.PROCESSING) {\n        expired.value = false\n        window.setTimeout(() => { expired.value = true }, 5000)\n    }\n})\n\nconst displayProcessing = computed(() => props.state?.isProcessing && (!props.delay || expired.value))\nconst messages = computed(() => props.state?.data?.messages)\n\n\n\n</script>\n","<template>\n    <div class=\"text-right\">\n        <v-btn color=\"error\" class=\"me-2\" :prepend-icon=\"props.resetIcon\"\n                @click=\"emit('reset')\"\n                :disabled=\"props.disabled\">\n            <slot name=\"reset\">{{ props.resetLabel }}</slot>\n        </v-btn>\n        <v-btn v-if=\"props.state.isSending\"\n                color=\"primary\" prepend-icon=\"mdi-content-save\" disabled>\n            Saving\n        </v-btn>\n        <v-btn v-else color=\"primary\" :prepend-icon=\"props.validateIcon\"\n                @click=\"emit('validate')\"\n                :disabled=\"props.disabled || props.validateDisabled\">\n            <slot name=\"validate\">{{ props.validateLabel }}</slot>\n        </v-btn>\n        </div>\n</template>\n<script setup>\nimport {defineEmits, defineProps} from 'vue'\nimport {VBtn} from 'vuetify/components/VBtn'\n\nconst emit = defineEmits(['validate', 'reset'])\nconst props = defineProps({\n    resetLabel: {type: String, default: \"Reset\"},\n    resetIcon: {type: String, default: \"mdi-close-circle\"},\n    validateLabel: {type: String, default: \"Save\"},\n    validateIcon: {type: String, default: \"mdi-content-save\"},\n    disabled: {type: Boolean, default: false},\n    state: {type: Object, default: () => State.none()},\n    validateDisabled: {type: Boolean, default: false},\n})\n</script>\n","<template>\n    <ox-state-alert :state=\"state\">\n        <template #none=\"{state}\">\n            <p>Please enter your credentials in order too proceed...</p>\n        </template>\n        <template #ok-detail=\"{state}\">\n            <p v-if=\"props.next\">You soon will be redirected to <i>{{ props.next }}</i></p>\n        </template>\n        <template #error=\"{state}\">\n            <ox-field-details :errors=\"state.data?.username\"/>\n            <ox-field-details :errors=\"state.data?.password\"/>\n        </template>\n    </ox-state-alert>\n    <template v-if=\"!state.isOk\">\n        <v-text-field variant=\"underlined\"\n                label=\"Enter login\" v-model=\"credentials.username\"\n                >\n        </v-text-field>\n        <v-text-field variant=\"underlined\"\n                label=\"Enter password\" v-model=\"credentials.password\"\n                :type=\"showPassword ? 'text' : 'password'\"\n                :append-icon=\"showPassword ? 'mdi-eye' : 'mdi-eye-off'\"\n                @click:append=\"showPassword = !showPassword\"\n                >\n        </v-text-field>\n        <div class=\"text-right mt-3\">\n            <slot name=\"default\" :value=\"credentials.password\">\n                <ox-validation-btn v-if=\"credentials.username && credentials.password\"\n                    validate-label=\"Login!\"\n                    @validate=\"login()\" @reset=\"reset()\"\n                    :state=\"state\"/>\n            </slot>\n        </div>\n    </template>\n</template>\n<script setup>\nimport {computed, inject, ref, reactive, defineModel, defineProps} from 'vue'\n\nimport OxStateAlert from './OxStateAlert'\nimport OxValidationBtn from './OxValidationBtn.vue'\nimport OxFieldDetails from './OxFieldDetails.vue'\nimport config from '../config'\n\nimport State from '../utils/state'\nimport {reset as $reset} from '../utils'\nimport {User} from '../models/auth'\n\nconst repos = inject(\"repos\")\nconst props = defineProps({\n    next: {type: String},\n})\n\nconst emit = defineEmits(['save', 'saved'])\nconst credentials = reactive({\n    username: '',\n    password: '',\n})\nconst showPassword = ref(false)\nconst state = reactive(new State())\n\nfunction reset(resetState=true) {\n    $reset(credentials, {\"username\": \"\", password: \"\"})\n    resetState && state.none()\n}\n\nasync function login() {\n    state.processing()\n\n    try {\n        const resp = await fetch(\"/api/ox/core/account/login/\", {\n            method: \"POST\",\n            headers: config.axiosConfig.headers,\n            body: JSON.stringify(credentials),\n        })\n        if(resp.status == 200) {\n            credentials.credentials = \"\"\n            credentials.password = \"\"\n            state.ok(await resp.json())\n\n            if(props.next)\n                window.location.href = props.next\n        }\n        else\n            state.error(await resp.json())\n    }\n    catch(error) {\n        state.ok(error?.message || error)\n    }\n}\n</script>\n","<template>\n    <v-sheet class=\"ma-4\">\n        <Teleport to=\"#app-bar-right\" v-if=\"mounted && panel.name == props.name\">\n            <slot name=\"append-title\"/>\n            <v-btn v-if=\"props.help\" class=\"ml-3\"\n                :href=\"props.help\" target=\"new\"\n                icon=\"mdi-information-outline\" />\n        </Teleport>\n\n        <slot name=\"default\"/>\n    </v-sheet>\n</template>\n<script setup>\nimport { defineProps, inject, onMounted, ref, watch } from 'vue'\nconst props = defineProps({\n    name: String,\n    title: String,\n    icon: String,\n    help: String,\n})\n\n// ensure teleport will be set after component has been mounted\nconst mounted = ref(false)\nonMounted(() => { mounted.value = true })\n\nconst panel = inject('panel')\n\nwatch(() => props?.title, (val) => {\n    if(panel.name == props.name)\n        panel.title = val\n})\n\nwatch(() => props?.icon, (val) => {\n    if(panel.name == props.name)\n        panel.icon = val\n})\n</script>\n","<template>\n    <ox-state-alert v-if=\"props.state\" :state=\"props.state\" delay/>\n    <template v-if=\"props.tabbed\">\n        <v-tabs-window-item :value=\"props.name\">\n            <slot name=\"sheet\" :context=\"context\" :panel=\"panel\">\n                <ox-panel-sheet :name=\"props.name\" :title=\"props.title\" :icon=\"props.icon\">\n                    <template v-for=\"(_, name) in slots\" v-slot:[name] :key=\"name\">\n                        <slot :name=\"name\" :context=\"context\" :panel=\"panel\"></slot>\n                    </template>\n                </ox-panel-sheet>\n            </slot>\n        </v-tabs-window-item>\n    </template>\n    <template v-else>\n        <slot name=\"sheet\" :context=\"context\" :panel=\"panel\">\n            <ox-panel-sheet :name=\"props.name\" :title=\"props.title\" :icon=\"props.icon\">\n                <template v-for=\"(_, name) in slots\" v-slot:[name] :key=\"name\">\n                    <slot :name=\"name\" :context=\"context\" :panel=\"panel\"></slot>\n                </template>\n            </ox-panel-sheet>\n        </slot>\n    </template>\n</template>\n<script setup>\nimport { computed, defineProps, defineExpose, inject, toRefs, useSlots } from 'vue'\n\nimport {panelProps} from '../composables'\nimport OxPanelSheet from './OxPanelSheet.vue'\nimport OxStateAlert from './OxStateAlert.vue'\n\nconst slots = useSlots()\nconst props = defineProps({\n    ...panelProps,\n    state: {type: Object, default: null},\n})\n\nconst context = inject('context')\nconst panel = inject('panel')\n</script>\n","<template>\n    <template v-if=\"value\">\n        <template v-if=\"tabs && Object.keys(tabs).length\">\n            <v-tabs v-model=\"tab\">\n                <slot name=\"tab.default\" v-bind=\"bind\">\n                    <v-tab :text=\"model?.meta?.verbose\" value=\"model\"/>\n                </slot>\n                <template v-for=\"(_, name) in tabs\">\n                    <slot :name=\"name\" v-bind=\"bind\"></slot>\n                </template>\n            </v-tabs>\n            <v-tabs-window v-model=\"tab\">\n                <v-tabs-window-item value=\"model\">\n                    <slot name=\"window.default\" v-bind=\"bind\"></slot>\n                </v-tabs-window-item>\n                <template v-for=\"(value, name) in windows\">\n                    <v-tabs-window-item :value=\"value\">\n                        <slot :name=\"name\" v-bind=\"bind\"></slot>\n                    </v-tabs-window-item>\n                </template>\n            </v-tabs-window>\n        </template>\n        <template v-else>\n            <slot name=\"window.default\" v-bind=\"bind\"></slot>\n        </template>\n    </template>\n    <template v-else>\n        Nothing to edit\n    </template>\n</template>\n<script setup>\nimport { computed, ref, defineProps, defineModel, inject, useSlots, watch } from 'vue'\n\nimport OxActions from './OxActions.vue'\nimport OxPanelSheet from './OxPanelSheet.vue'\n\nimport {filterSlots} from '../utils/vue'\n\nconst context = inject('context')\n\n\n// ---- Editors\nconst value = defineModel('value', {\n    type: Object,\n    default: () => null\n})\nconst model = computed(() => value.value?.constructor)\n\n\n// ---- Panel\nconst panel = inject('panel')\nfunction updatePanel(val) {\n    if(panel.value && val)\n        panel.value.title = `Edit ${val.$title}`\n}\nupdatePanel(value.value)\nwatch(value, updatePanel)\n\n\n// ---- Slots & tabs\nconst tab = ref(null)\nconst slots = useSlots()\n\nconst tabs = filterSlots(slots, \"tab.\", {exclude: \"tab.default\"})\nconst windows = filterSlots(slots, \"window.\", {exclude: \"window.default\"})\n\n\nconst bind = computed(() => {\n    return {\n        panel,\n        value: value.value,\n        model: model.value,\n    }\n})\n</script>\n","<template>\n    <ox-panel :name=\"props.name\" :title=\"title\" :icon=\"icon\"\n            :state=\"list.state\" :tabbed=\"props.tabbed\">\n        <template #append-title>\n            <slot name=\"append-title\" v-bind=\"bind\"/>\n\n            <template v-if=\"panel.view.startsWith('list.')\">\n                <v-btn-group class=\"ml-3\" color=\"secondary\"\n                        density=\"compact\" variant=\"tonal\">\n                    <slot name=\"nav.list\" v-bind=\"bind\"/>\n                    <v-btn v-if=\"filters\"\n                        :title=\"showFilters ? t('filters.hide') : t('filters.show')\"\n                        :aria-label=\"showFilters ? t('filters.hide') : t('filters.show')\"\n                        @click=\"showFilters = !showFilters\" :active=\"showFilters\">\n                        <v-icon :icon=\"filters.icon\"/>\n                    </v-btn>\n                </v-btn-group>\n            </template>\n            <template v-else-if=\"panel.value?.id\">\n                <v-btn-group class=\"ml-3\" color=\"secondary\" density=\"compact\" variant=\"tonal\">\n                    <slot name=\"nav.item\" v-bind=\"bind\"/>\n\n                    <template v-if=\"panel.view == 'edit'\">\n                        <v-menu>\n                            <template #activator=\"{props}\">\n                                <v-btn prepend-icon=\"mdi-dots-vertical\" v-bind=\"props\">\n                                    {{ t('actions') }}\n                                </v-btn>\n                            </template>\n                            <v-list>\n                                <slot name=\"item.actions\" v-bind=\"bind\"/>\n                            </v-list>\n                        </v-menu>\n                    </template>\n\n                    <v-btn :disabled=\"!list.prev\"\n                            :title=\"t('prev')\" :aria-label=\"t('prev')\"\n                            @click.stop=\"panel.value = list.prev\">\n                        <v-icon icon=\"mdi-chevron-left\"/>\n                    </v-btn>\n                    <v-btn :disabled=\"!list.next\"\n                            :title=\"t('next')\" :aria-label=\"t('next')\"\n                            @click.stop=\"panel.value = list.next\">\n                        <v-icon icon=\"mdi-chevron-right\"/>\n                    </v-btn>\n                </v-btn-group>\n            </template>\n\n            <v-btn-toggle class=\"ml-3\" color=\"secondary\" v-model=\"panel.view\" density=\"compact\" variant=\"tonal\">\n                <!-- TODO: permission check -->\n                <v-btn value=\"list.table\"\n                        :title=\"t('panels.nav.table')\"\n                        :aria-label=\"t('panels.nav.table')\">\n                    <v-icon>mdi-table</v-icon>\n                </v-btn>\n                <v-btn value=\"list.cards\" v-if=\"slots['views.list.cards']\"\n                        :title=\"t('panels.nav.cards')\"\n                        :aria-label=\"t('panels.nav.cards')\">\n                    <v-icon>mdi-card-account-details</v-icon>\n                </v-btn>\n                <v-btn value=\"list.kanban\" v-if=\"slots['views.list.kanban']\"\n                        :title=\"t('panels.nav.kanban')\"\n                        :aria-label=\"t('panels.nav.kanban')\">\n                    <v-icon>mdi-view-column</v-icon>\n                </v-btn>\n                <v-btn value=\"add\" v-if=\"slots['views.add']\"\n                        @click.stop=\"create()\"\n                        :title=\"t('panels.nav.add')\"\n                        :aria-label=\"t('panels.nav.add')\">\n                    <v-icon>mdi-plus-box</v-icon>\n                </v-btn>\n                <v-btn value=\"edit\" v-if=\"slots['views.edit'] || editSlots\"\n                        :disabled=\"!panel.value?.id\"\n                        :title=\"t('panels.nav.edit')\"\n                        :aria-label=\"t('panels.nav.edit')\">\n                    <v-icon>mdi-pencil</v-icon>\n                </v-btn>\n                <slot name=\"nav.views\" v-bind=\"bind\"/>\n            </v-btn-toggle>\n        </template>\n\n        <template #default>\n            <ox-list-filters ref=\"filters\"\n                    v-show=\"panel.view.startsWith('list.') && showFilters\"\n                    :list=\"list\" :search=\"props.search\"\n                    teleport-to=\"#panel-list-actions\">\n                <template #default=\"bind\">\n                    <slot name=\"list.filters\" v-bind=\"bind\"/>\n                </template>\n            </ox-list-filters>\n\n            <v-window v-model=\"panel.view\">\n                <!-- list.table is always provided -->\n                <v-window-item value=\"list.table\" v-if=\"!slots['views.list.table']\">\n                    <ox-list-table :list=\"list\" :headers=\"headers\" edit>\n                        <template v-for=\"(_, name) in itemSlots\" v-slot:[name]=\"bind\" :key=\"name\">\n                            <slot :name=\"name\" v-bind=\"bind\"/>\n                        </template>\n                    </ox-list-table>\n                </v-window-item>\n\n                <template v-for=\"(name, slot) in viewsListSlots\">\n                    <v-window-item :value=\"'list.' + name\">\n                        <slot :name=\"slot\" v-bind=\"bind\"/>\n                    </v-window-item>\n                </template>\n\n                <v-window-item value=\"edit\" v-if=\"slots['views.edit'] || editSlots\">\n                    <ox-model-edit v-model:value=\"panel.value\">\n                        <template v-for=\"(name, slot) in editSlots\" #[name]=\"bind\">\n                            <slot :name=\"slot\" v-bind=\"bind\"/>\n                        </template>\n                    </ox-model-edit>\n                </v-window-item>\n\n                <v-window-item value=\"add\" v-if=\"slots['views.add']\">\n                    <slot name=\"views.add\" v-bind=\"bind\"\n                        :saved=\"(item) => created(item)\"/>\n                </v-window-item>\n            </v-window>\n        </template>\n    </ox-panel>\n</template>\n<script setup lang=\"ts\">\nimport { computed, defineProps, inject, ref, toRefs, useTemplateRef, useSlots, unref, watch } from 'vue'\nimport { Teleport } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nimport OxAction from './OxAction.vue'\nimport OxListFilters from './OxListFilters.vue'\nimport OxListTable from './OxListTable.vue'\nimport OxPanel from './OxPanel.vue'\nimport OxModelEdit from './OxModelEdit.vue'\n\nimport {mapToObject} from '../utils'\nimport {filterSlots} from '../utils/vue'\nimport {useApiListProps, useApiList} from '../composables/list'\nimport {panelProps} from '../composables/panel'\nimport {Permissions} from '../models'\n\nconst { t } = useI18n()\n\nconst slots = useSlots()\nconst viewsListSlots = filterSlots(slots, 'views.list.')\nconst itemSlots = filterSlots(slots, 'item.')\nconst editSlots = filterSlots(slots, 'views.edit.')\n\n\nconst props = defineProps({\n    ...useApiListProps(),\n    ...panelProps,\n    search: String,\n    view: String,\n    headers: Array,\n    showFilters: {type: Boolean, default: false},\n})\n\nconst repos = inject('repos')\nconst panel = inject('panel')\nconst {value} = toRefs(panel)\n\n// ---- list\nconst filters = useTemplateRef('filters')\nconst listProps = computed(() => mapToObject(useApiListProps(), props))\nconst list = computed(() => useApiList(\n    {...listProps.value, value},\n    {repos},\n))\nconst items = computed(() => list.value?.items || [])\nconst showFilters = ref(props.showFilters)\n\n// FIXME: move into OxPanel? More generaly move views handling into panel\nwatch(() => panel.view, (value) => {\n    if(!value)\n        panel.view = props.view || 'list.table'\n})\n\nfunction create(path='.add') { panel.reset(path, new props.repo.use()) }\nfunction created(item) {\n    panel.reset('.edit', item, {force:true})\n    list.value?.fetch()\n}\n\n\n// ---- panel\nconst title = computed(() => {\n    if(props.title)\n        return props.title\n\n    const model = unref(list).repo.use\n    if(model === null)\n        return \"\"\n\n    // many items\n    if(panel.view.startsWith('list.'))\n        return t(`models.${model.entity}`, 3)\n\n    if(!panel.value)\n        return \"\"\n\n    const title = panel.value.$title\n    if(title)\n        return title\n\n    const name = t(`models.${model.entity}`)\n    return (panel.value.id) ? t(`models._.title`, {model: name, id: panel.value.id})\n                            : t(`models._.title.new`, {model: name})\n})\nconst icon = computed(() =>\n    props.icon ? props.icon : (props.repo.use?.meta?.icon || null)\n)\n\nconst bind = computed(() => {\n    return ({\n        panel,\n        list: unref(list),\n        items: unref(list).items,\n        value: panel.value\n    })\n})\n\n</script>\n","<template>\n    <v-list-item v-if=\"visible\"\n        :active=\"panel.name == props.name\"\n        :prepend-icon=\"props.icon\" :title=\"props.title\"\n        @click.stop=\"panel.reset(props.name, props.data, props)\"/>\n</template>\n<script setup>\nimport { computed, defineProps, inject, defineExpose } from 'vue'\nimport { panelNavProps } from '../composables'\n\nconst props = defineProps(panelNavProps)\nconst panel = inject('panel')\nconst visible = computed(() => !props.auto || panel.name == props.name)\n\nconst title = computed(() => {\n    const postfix = panel.name == props.name && panel.edited ? \"*\" : \"\"\n    return props.title + postfix\n})\n\ndefineExpose({title, name: props.name})\n</script>\n"],"names":["props","__props","emits","__emit","context","inject","processing","permissions","allowed","run","useAction","t","useI18n","panel","repos","makeModelApiAction","user","item","useSlots","slots","nav","reactive","useAppContext","_sfc_main","component","shallowRef","is","computed","name","reset","defineAsyncComponent","watch","h","hasFilters","k","v","icon","__expose","VSlideGroupItem","genericComponent","makeGroupItemProps","val","_ref","slideGroupItem","useGroupItem","VSlideGroupSymbol","_a","color","idx","assign","result","sorted","vals","itemSlots","filterSlots","Permissions","updateOptions","event","key","order","runEdit","expired","ref","States","displayProcessing","messages","_b","emit","credentials","showPassword","state","State","resetState","$reset","login","resp","config","error","mounted","onMounted","value","_useModel","model","updatePanel","tab","tabs","windows","bind","viewsListSlots","editSlots","toRefs","filters","useTemplateRef","listProps","mapToObject","useApiListProps","list","useApiList","showFilters","create","path","created","title","unref","visible","postfix"],"mappings":"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","x_google_ignoreList":[7]}