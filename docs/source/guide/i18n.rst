Internationalization & localization
===================================

Internationalization is done at two places: at django level using the framework's tool, and with ``vue-i18n`` for client application.

On the backend, the :py:class:`ox.core.middleware.I18nMiddleware` class will set ``lang`` cookie based on ``Accept-Languages`` HTTP headers if not present. This cookie will be a comma separated list of locales candidates to use on the client application.


Client-side
-----------
Message are provided under project's root ``public/locales/[locale].json`` files. This allows Vite to copy them at building into django's application ``static`` directory where lies all generated statics.

Lazy loading is done through the ``ox_core.useI18n`` composable. It internally call ``vue-i18n``'s homonymous function, and dynamically load the files based on configured locale (using fallback locale if the user selected one has failed). When locale change, the corresponding file will be loaded.

A client application only needs to load thoses files once, for example as the ``ox_core`` does through the ``OxApp`` component. Nested *non-SFC* components can use ``vue-i18n``s ``useI18n`` instead of Oxylus' one. Since SFC components can be embedded into another application, they require to load locale file (thus use ``ox_core.useI18n``).


Conventions
...........

Localization keys are case lowered. They are organized around components and objects.

Here is a list of conventions used in Oxylus:

- ``actions.[name]``: action label.

    - ``actions.[name].confirm``: ask for confirmation.

- ``filters.[]``: labels used in filters.
- ``models.[entity]``: model name as displayed to user (where ``[entity]`` is the model's ``entity``). The value should provide pluralization.
- ``panels.[name]``: panel displayed name (by panel name)..

    - ``panels.[name].nav``: panel navigation label
